from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.states.states import PersonalityState
from bot.keyboards.inline import (
    personality_keyboard,
    personality_reply_keyboard,
    start_keyboard
)
from bot.services.chatgpt_client import ask_chatgpt

router = Router()

# üé≠ –°—Ç–∞—Ä—Ç —Ñ–∏—á–∏: –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "open_personality")
async def start_personality(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PersonalityState.waiting_for_choice)
    await callback.message.edit_text(
        "üé≠ –° –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
        reply_markup=personality_keyboard()
    )
    await callback.answer()

# ‚úÖ –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@router.callback_query(F.data.startswith("person_"))
async def handle_person_choice(callback: CallbackQuery, state: FSMContext):
    character = callback.data.split("_")[1]

    if character == "end":
        await state.clear()
        await callback.message.edit_text("üèÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_keyboard())
        await callback.answer()
        return

    await state.set_state(PersonalityState.waiting_for_question)
    await state.update_data({"character": character})
    await callback.message.edit_text(
        f"üó£Ô∏è –¢—ã –≤—ã–±—Ä–∞–ª: {character.title()}. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=None
    )
    await callback.answer()

# üí¨ –í–æ–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
@router.message(PersonalityState.waiting_for_question)
async def handle_person_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    character = data.get("character", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")

    prompt = (
        f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã {character.title()}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∏–ª–µ —ç—Ç–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
        f"–í–æ–ø—Ä–æ—Å: {msg.text}"
    )

    response = await ask_chatgpt(prompt)
    sent = await msg.answer(
        f"<b>{character.title()} –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n{response}",
        reply_markup=personality_reply_keyboard()
    )

    await state.update_data({"last_message_id": sent.message_id})
    await state.set_state(PersonalityState.waiting_for_question)

# üîÅ –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å
@router.callback_query(F.data == "person_again")
async def repeat_person_dialogue(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    character = data.get("character", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")

    await callback.message.edit_text(
        f"üó£Ô∏è –¢—ã —Å–Ω–æ–≤–∞ –æ–±—â–∞–µ—à—å—Å—è —Å {character.title()}. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=None
    )
    await callback.answer()

# üèÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "person_end")
async def end_personality(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    try:
        await callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–∞–ª–æ–≥–æ–º
    except Exception:
        pass

    await callback.message.answer("üèÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_keyboard())
    await callback.answer()

def register(dp):
    dp.include_router(router)