from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.states.states import PersonalityState
from bot.keyboards.inline import (
    personality_keyboard,
    personality_reply_keyboard,
    start_keyboard
)
from bot.services.chatgpt_client import ask_chatgpt
from bot.assets.prompts.personalities_prompt import PERSONALITIES

router = Router()

# üé≠ –°—Ç–∞—Ä—Ç —Ñ–∏—á–∏: –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "open_personality")
async def start_personality(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PersonalityState.waiting_for_choice)
    await callback.message.edit_text(
        "üé≠ –° –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
        reply_markup=personality_keyboard()
    )
    await callback.answer()

# ‚úÖ –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@router.callback_query(F.data.startswith("persona_"))
async def handle_person_choice(callback: CallbackQuery, state: FSMContext):
    character_key = callback.data.removeprefix("persona_")
    character_data = PERSONALITIES.get(character_key)

    if not character_data:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂.")
        await callback.answer()
        return

    await state.set_state(PersonalityState.waiting_for_question)
    await state.update_data({
        "character_key": character_key,
        "dialog_history": []  # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    })

    await callback.message.edit_text(
        f"üó£Ô∏è –¢—ã –≤—ã–±—Ä–∞–ª: {character_data['name']}. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=None
    )
    await callback.answer()

# üí¨ –í–æ–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
@router.message(PersonalityState.waiting_for_question)
async def handle_person_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    character_key = data.get("character_key")
    history = data.get("dialog_history", [])

    character_data = PERSONALITIES.get(character_key)
    if not character_data:
        await msg.answer("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=personality_keyboard())
        await state.set_state(PersonalityState.waiting_for_choice)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.text}")
    prompt = f"{character_data['prompt']}\n–ò—Å—Ç–æ—Ä–∏—è:\n" + "\n".join(history)

    response = await ask_chatgpt(prompt) or "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
    history.append(f"{character_data['name']}: {response}")

    await msg.answer(
        f"<b>{character_data['name']} –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n{response}",
        reply_markup=personality_reply_keyboard()
    )

    await state.update_data({"dialog_history": history})

# üîÅ –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å
@router.callback_query(F.data == "person_again")
async def repeat_person_dialogue(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    character_key = data.get("character_key")
    character_data = PERSONALITIES.get(character_key)

    if not character_data:
        await callback.message.answer(
            "‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=personality_keyboard()
        )
        await state.set_state(PersonalityState.waiting_for_choice)
        await callback.answer()
        return

    await callback.message.edit_text(
        f"üó£Ô∏è –¢—ã —Å–Ω–æ–≤–∞ –æ–±—â–∞–µ—à—å—Å—è —Å {character_data['name']}. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=None
    )
    await callback.answer()

# üèÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "person_end")
async def end_personality(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("üèÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_keyboard())
    await callback.answer()

def register(dp):
    dp.include_router(router)